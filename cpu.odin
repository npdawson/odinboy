package odinboy

import "core:fmt"

Instruction :: struct {
	disassembly: string,
	length:      byte, // number of operand bytes
	cycles:      byte,
	jump_cycles: byte, // number of cycles if jump/call is taken
	function:    proc(^Gameboy),
}

instructions: [256]Instruction = {
	{"NOP", 0, 4, 0, nop},				// 0x00
	{"LD BC, Ox%04x", 2, 12, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"LD C, 0x%02x", 1, 8, 0, ld_c_d8},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},					// 0x10
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"JR NZ, 0x%02x", 1, 12, 8, jr_nz_r8},	// 0x20
	{"LD HL, 0x%04x", 2, 12, 0, ld_hl},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},					// 0x30
	{"LD SP, 0x%04x", 2, 12, 0, ld_sp},
	{"LD (HL-), A", 0, 8, 0, ld_hl_dec},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},		// 0x40
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},		// 0x50
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},		// 0x60
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},		// 0x70
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},		// 0x80
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},		// 0x90
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},		// 0xa0
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"XOR A", 0, 4, 0, xor_a},
	{"", 0, 0, 0, nil},		// 0xb0
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},		// 0xc0
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"CB", 0, 4, 0, cb},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},		// 0xd0
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},		// 0xe0
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},		// 0xf0
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
	{"", 0, 0, 0, nil},
}

cb_instructions := [256]Instruction {
	{"", 1, 0, 0, nil}, // 0x00
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil}, // 0x10
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil}, // 0x20
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil}, // 0x30
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil}, // 0x40
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil}, // 0x50
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil}, // 0x60
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil}, // 0x70
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"BIT 7,H", 1, 8, 0, bit_7_h},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil}, // 0x80
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil}, // 0x90
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil}, // 0xa0
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil}, // 0xb0
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil}, // 0xc0
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil}, // 0xd0
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil}, // 0xe0
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil}, // 0xf0
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
	{"", 1, 0, 0, nil},
}

nop :: proc(gb: ^Gameboy) {
}

ld_sp :: proc(gb: ^Gameboy) {
	addr := gb.cpu.registers.pc + 1
	data: u16 = read_word(addr, gb.memory, gb.boot_rom_enabled)
	gb.cpu.registers.sp = data
}

xor_a :: proc(gb: ^Gameboy) {
	gb.cpu.registers.a ~= gb.cpu.registers.a
	gb.cpu.registers.flags = gb.cpu.registers.a == 0 ? { .Z } : {}
}

ld_hl :: proc(gb: ^Gameboy) {
	addr := gb.cpu.registers.pc + 1
	data: u16 = read_word(addr, gb.memory, gb.boot_rom_enabled)
	gb.cpu.registers.hl = data
}

ld_hl_dec :: proc(gb: ^Gameboy) {
	addr := gb.cpu.registers.hl
	gb.cpu.registers.hl -= 1
	write_byte(addr, gb.cpu.registers.a, &gb.memory)
}

cb :: proc(gb: ^Gameboy) {
}

bit_7_h :: proc(gb: ^Gameboy) {
	z := gb.cpu.registers.h & 0x10 == 0
	c := .C in gb.cpu.registers.flags
	flags: Flags = { .H }
	if z { flags += { .Z } }
	if c { flags += { .C } }
	gb.cpu.registers.flags = flags
}

jr_nz_r8 :: proc(gb: ^Gameboy) {
	offset := i8(read_byte(gb.cpu.registers.pc + 1, gb.memory, gb.boot_rom_enabled))
	if !(.Z in gb.cpu.registers.flags) {
		fmt.printfln("Jumping %v bytes!", offset)
		addr := i16(gb.cpu.registers.pc) + i16(offset)
		gb.cpu.registers.pc = u16(addr)
	}
}

ld_c_d8 :: proc(gb: ^Gameboy) {
	addr := gb.cpu.registers.pc + 1
	data := read_byte(addr, gb.memory, gb.boot_rom_enabled)
	gb.cpu.registers.c = data
}
